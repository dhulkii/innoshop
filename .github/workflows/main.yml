name: Deploy New Docker Container

on:
  push:
    branches:
      - master

env:
  SERVER_HOST: ${{ secrets.SERVER_HOST }}
  SERVER_USER: ${{ secrets.SERVER_USER }}
  SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}

jobs:
  deploy-container:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Check out the code
      - name: Check out the repository
        uses: actions/checkout@v3

      # Step 2: Set up the SSH key for server connection
      - name: Set up SSH key
        run: |
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > private_key.pem
          chmod 600 private_key.pem

      # Step 3: Add server public key to known_hosts
      - name: Add server public key to known_hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ secrets.SERVER_HOST }} >> ~/.ssh/known_hosts
          chmod 644 ~/.ssh/known_hosts

      # Step 4: Log in to Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Step 5: Get the short Git commit ID
      - name: Get Commit ID
        id: get_commit
        run: echo "commit_id=$(git rev-parse --short HEAD)" >> $GITHUB_ENV

      # Step 6: Build the Docker image with commit ID
      - name: Build Docker Image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/php-app:${{ env.commit_id }} -t ${{ secrets.DOCKER_USERNAME }}/php-app:latest .

      # Step 7: Push the Docker image to Docker Hub
      - name: Push Docker Image to Docker Hub
        run: |
          docker push ${{ secrets.DOCKER_USERNAME }}/php-app:${{ env.commit_id }}
          docker push ${{ secrets.DOCKER_USERNAME }}/php-app:latest

      # Step 8: SSH into the server and stop/remove old container and run the new one
      - name: Deploy on the server
        run: |
          ssh -T -i private_key.pem ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} << 'EOF'
            # Navigate to the project directory
            cd /home/ubuntu/innoshop || exit 1

            # Stop and remove the old container
            docker stop php-app
            docker rm php-app

            # Remove the old image from the server
            docker rmi php-app:latest

            # Run the new container
            docker run -d --name php-app -p 9001:9001 ${{ secrets.DOCKER_USERNAME }}/php-app:latest
          EOF

      # Step 9: Clean up SSH private key
      - name: Clean up SSH private key
        run: |
          rm -f private_key.pem
        if: always()

      # Step 10: Clean up known_hosts file
      - name: Clean up known_hosts file
        run: |
          rm -f ~/.ssh/known_hosts
        if: always()
